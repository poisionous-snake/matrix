// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module Fp16Add(	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:6:7]
  input         clock,	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:6:7]
                reset,	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:6:7]
  input  [15:0] io_in1,	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:7:14]
                io_in2,	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:7:14]
  output [15:0] io_out	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:7:14]
);

  wire [10:0] _fullMant1_T = {1'h1, io_in1[9:0]};	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:14:23, :20:24]
  wire [5:0]  _expDiff_T_2 = {1'h0, io_in1[14:10]} - {1'h0, io_in2[14:10]};	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:13:22, :17:22, :23:29, :31:18]
  `ifndef SYNTHESIS	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:24:11]
    always @(posedge clock) begin	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:24:11]
      if ((`PRINTF_COND_) & ~reset)	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:24:11]
        $fwrite(32'h80000002, "expDiff = %d\n", _expDiff_T_2);	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:23:29, :24:11]
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire        _GEN = $signed(_expDiff_T_2) > -6'sh1;	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:23:29, :31:18]
  wire [10:0] _alignedMant2_T_1 = $signed($signed(_fullMant1_T) >>> _expDiff_T_2);	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:20:24, :23:29, :35:35]
  wire [4:0]  finalExp = _GEN ? io_in1[14:10] : io_in2[14:10];	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:13:22, :17:22, :31:{18,26}, :32:18, :37:18]
  wire [10:0] _alignedMant1_T_4 = $signed($signed(_fullMant1_T) >>> 6'h0 - _expDiff_T_2);	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:20:24, :23:29, :31:18, :39:{35,39}]
  wire [11:0] alignedMant1 =
    _GEN ? {2'h3, io_in1[9:0]} : {_alignedMant1_T_4[10], _alignedMant1_T_4};	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:14:23, :31:{18,26}, :34:22, :39:{22,35}]
  wire [11:0] alignedMant2 =
    _GEN ? {_alignedMant2_T_1[10], _alignedMant2_T_1} : {2'h3, io_in2[9:0]};	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:18:23, :31:{18,26}, :34:22, :35:{22,35}, :40:22]
  wire [11:0] _mantSum_T_8 =
    (io_in1[15] ? 12'h0 - alignedMant1 : alignedMant1)
    + (io_in2[15] ? 12'h0 - alignedMant2 : alignedMant2);	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:12:23, :16:23, :31:{18,26}, :34:22, :35:22, :39:22, :40:22, :43:{22,30,59,64,72}]
  assign io_out =
    {_GEN ? io_in1[15] : io_in2[15],
     _mantSum_T_8[11] ? finalExp + 5'h1 : finalExp,
     _mantSum_T_8[11] ? _mantSum_T_8[10:1] : _mantSum_T_8[9:0]};	// @[home/yzy/chisel-playground/playground/src/Fp16Add.scala:6:7, :12:23, :16:23, :31:{18,26}, :32:18, :33:19, :37:18, :38:19, :43:59, :49:27, :54:20, :55:{24,34}, :56:{24,36}, :58:{24,34}, :59:23, :62:18]
endmodule

