// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module fNToRecFN(	// @[home/yzy/chisel-playground/playground/src/fNToRecFN.scala:6:7]
  input  [15:0] io_in,	// @[home/yzy/chisel-playground/playground/src/fNToRecFN.scala:7:16]
  output [16:0] io_out	// @[home/yzy/chisel-playground/playground/src/fNToRecFN.scala:7:16]
);

  wire        isZeroExpIn = io_in[14:10] == 5'h0;	// @[home/yzy/chisel-playground/playground/src/fNToRecFN.scala:13:23, :16:30]
  wire [3:0]  normDist =
    io_in[9]
      ? 4'h0
      : io_in[8]
          ? 4'h1
          : io_in[7]
              ? 4'h2
              : io_in[6]
                  ? 4'h3
                  : io_in[5]
                      ? 4'h4
                      : io_in[4]
                          ? 4'h5
                          : io_in[3] ? 4'h6 : io_in[2] ? 4'h7 : {3'h4, ~(io_in[1])};	// @[home/yzy/chisel-playground/playground/src/fNToRecFN.scala:14:23, home/yzy/chisel-playground/playground/src/primitives.scala:90:52, src/main/scala/chisel3/util/Mux.scala:50:70]
  wire [24:0] _subnormalFract_T = {15'h0, io_in[9:0]} << normDist;	// @[home/yzy/chisel-playground/playground/src/fNToRecFN.scala:14:23, :21:31, src/main/scala/chisel3/util/Mux.scala:50:70]
  wire [5:0]  _adjustedExp_T_8 =
    (isZeroExpIn ? {2'h3, ~normDist} : {1'h0, io_in[14:10]})
    + {4'h4, isZeroExpIn ? 2'h2 : 2'h1};	// @[home/yzy/chisel-playground/playground/src/fNToRecFN.scala:13:23, :16:30, :21:44, :24:{23,46,86,118}, src/main/scala/chisel3/util/Mux.scala:50:70]
  assign io_out =
    {io_in[15],
     (&(_adjustedExp_T_8[5:4]))
       ? {2'h3, |(io_in[9:0]), _adjustedExp_T_8[2:0]}
       : isZeroExpIn & ~(|(io_in[9:0]))
           ? {3'h0, _adjustedExp_T_8[2:0]}
           : _adjustedExp_T_8,
     isZeroExpIn ? {_subnormalFract_T[8:0], 1'h0} : io_in[9:0]};	// @[home/yzy/chisel-playground/playground/src/fNToRecFN.scala:6:7, :12:21, :14:23, :16:30, :17:32, :21:{20,31,44}, :24:86, :26:30, :27:{32,57}, :30:15, :31:{18,54}, :32:18, :33:22, :37:{18,33}, src/main/scala/chisel3/util/Mux.scala:50:70]
endmodule

