;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit InnerProduct : 
  module fracSum : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_1 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_1 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_2 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_3 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_2 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_3 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_4 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_5 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_4 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_5 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_6 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_7 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_6 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_7 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_8 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_9 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_8 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_9 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_10 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_11 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_10 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_11 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_12 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_13 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_12 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_13 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_14 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_15 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_14 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_15 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_16 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_17 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_16 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_17 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_18 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_19 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_18 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_19 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_20 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_21 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_20 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_21 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_22 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_23 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_22 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_23 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_24 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_25 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_24 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_25 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_26 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_27 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_26 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_27 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_28 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_29 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_28 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_29 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fracSum_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module fracSum_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip iAbs : UInt<4>, flip frac : UInt<10>, fracSum : UInt<15>}
    
    node frac = cat(UInt<1>("h01"), io.frac) @[Cat.scala 30:58]
    node _fracSum_T = bits(io.iAbs, 0, 0) @[Fusion.scala 14:20]
    node _fracSum_T_1 = bits(_fracSum_T, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_2 = shl(frac, 0) @[Fusion.scala 14:37]
    node _fracSum_T_3 = mux(_fracSum_T_1, _fracSum_T_2, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_4 = bits(io.iAbs, 1, 1) @[Fusion.scala 14:20]
    node _fracSum_T_5 = bits(_fracSum_T_4, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_6 = shl(frac, 1) @[Fusion.scala 14:37]
    node _fracSum_T_7 = mux(_fracSum_T_5, _fracSum_T_6, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_8 = bits(io.iAbs, 2, 2) @[Fusion.scala 14:20]
    node _fracSum_T_9 = bits(_fracSum_T_8, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_10 = shl(frac, 2) @[Fusion.scala 14:37]
    node _fracSum_T_11 = mux(_fracSum_T_9, _fracSum_T_10, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_12 = bits(io.iAbs, 3, 3) @[Fusion.scala 14:20]
    node _fracSum_T_13 = bits(_fracSum_T_12, 0, 0) @[Fusion.scala 14:24]
    node _fracSum_T_14 = shl(frac, 3) @[Fusion.scala 14:37]
    node _fracSum_T_15 = mux(_fracSum_T_13, _fracSum_T_14, UInt<15>("h00")) @[Fusion.scala 14:12]
    node _fracSum_T_16 = add(_fracSum_T_3, _fracSum_T_7) @[Fusion.scala 15:16]
    node _fracSum_T_17 = tail(_fracSum_T_16, 1) @[Fusion.scala 15:16]
    node _fracSum_T_18 = add(_fracSum_T_17, _fracSum_T_11) @[Fusion.scala 15:16]
    node _fracSum_T_19 = tail(_fracSum_T_18, 1) @[Fusion.scala 15:16]
    node _fracSum_T_20 = add(_fracSum_T_19, _fracSum_T_15) @[Fusion.scala 15:16]
    node fracSum = tail(_fracSum_T_20, 1) @[Fusion.scala 15:16]
    io.fracSum <= fracSum @[Fusion.scala 19:16]
    
  module Norm_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Norm_31 : 
    input clock : Clock
    input reset : Reset
    output io : {flip originFp16 : UInt<16>, flip fracSum : UInt<19>, flip sign : UInt<1>, fp16 : UInt<16>}
    
    node originExp = bits(io.originFp16, 14, 10) @[Fusion.scala 31:34]
    node _finalFrac_T = bits(io.fracSum, 18, 18) @[Fusion.scala 35:16]
    node finalFrac_hi_hi = bits(io.fracSum, 17, 8) @[Fusion.scala 35:35]
    node finalFrac_hi_lo = bits(io.fracSum, 7, 7) @[Fusion.scala 35:51]
    node finalFrac_lo_hi = bits(io.fracSum, 6, 6) @[Fusion.scala 35:63]
    node _finalFrac_T_1 = bits(io.fracSum, 5, 0) @[Fusion.scala 35:75]
    node finalFrac_lo_lo = orr(_finalFrac_T_1) @[Fusion.scala 35:82]
    node finalFrac_lo = cat(finalFrac_lo_hi, finalFrac_lo_lo) @[Cat.scala 30:58]
    node finalFrac_hi = cat(finalFrac_hi_hi, finalFrac_hi_lo) @[Cat.scala 30:58]
    node _finalFrac_T_2 = cat(finalFrac_hi, finalFrac_lo) @[Cat.scala 30:58]
    node _finalFrac_T_3 = bits(io.fracSum, 17, 17) @[Fusion.scala 36:16]
    node finalFrac_hi_hi_1 = bits(io.fracSum, 16, 7) @[Fusion.scala 36:35]
    node finalFrac_hi_lo_1 = bits(io.fracSum, 6, 6) @[Fusion.scala 36:51]
    node finalFrac_lo_hi_1 = bits(io.fracSum, 5, 5) @[Fusion.scala 36:63]
    node _finalFrac_T_4 = bits(io.fracSum, 4, 0) @[Fusion.scala 36:75]
    node finalFrac_lo_lo_1 = orr(_finalFrac_T_4) @[Fusion.scala 36:82]
    node finalFrac_lo_1 = cat(finalFrac_lo_hi_1, finalFrac_lo_lo_1) @[Cat.scala 30:58]
    node finalFrac_hi_1 = cat(finalFrac_hi_hi_1, finalFrac_hi_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_5 = cat(finalFrac_hi_1, finalFrac_lo_1) @[Cat.scala 30:58]
    node _finalFrac_T_6 = bits(io.fracSum, 16, 16) @[Fusion.scala 37:16]
    node finalFrac_hi_hi_2 = bits(io.fracSum, 15, 6) @[Fusion.scala 37:35]
    node finalFrac_hi_lo_2 = bits(io.fracSum, 5, 5) @[Fusion.scala 37:51]
    node finalFrac_lo_hi_2 = bits(io.fracSum, 4, 4) @[Fusion.scala 37:63]
    node _finalFrac_T_7 = bits(io.fracSum, 3, 0) @[Fusion.scala 37:75]
    node finalFrac_lo_lo_2 = orr(_finalFrac_T_7) @[Fusion.scala 37:82]
    node finalFrac_lo_2 = cat(finalFrac_lo_hi_2, finalFrac_lo_lo_2) @[Cat.scala 30:58]
    node finalFrac_hi_2 = cat(finalFrac_hi_hi_2, finalFrac_hi_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_8 = cat(finalFrac_hi_2, finalFrac_lo_2) @[Cat.scala 30:58]
    node _finalFrac_T_9 = bits(io.fracSum, 15, 15) @[Fusion.scala 38:16]
    node finalFrac_hi_hi_3 = bits(io.fracSum, 14, 5) @[Fusion.scala 38:35]
    node finalFrac_hi_lo_3 = bits(io.fracSum, 4, 4) @[Fusion.scala 38:51]
    node finalFrac_lo_hi_3 = bits(io.fracSum, 3, 3) @[Fusion.scala 38:63]
    node _finalFrac_T_10 = bits(io.fracSum, 2, 0) @[Fusion.scala 38:75]
    node finalFrac_lo_lo_3 = orr(_finalFrac_T_10) @[Fusion.scala 38:82]
    node finalFrac_lo_3 = cat(finalFrac_lo_hi_3, finalFrac_lo_lo_3) @[Cat.scala 30:58]
    node finalFrac_hi_3 = cat(finalFrac_hi_hi_3, finalFrac_hi_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_11 = cat(finalFrac_hi_3, finalFrac_lo_3) @[Cat.scala 30:58]
    node _finalFrac_T_12 = bits(io.fracSum, 14, 14) @[Fusion.scala 39:16]
    node finalFrac_hi_hi_4 = bits(io.fracSum, 13, 4) @[Fusion.scala 39:35]
    node finalFrac_hi_lo_4 = bits(io.fracSum, 3, 3) @[Fusion.scala 39:51]
    node finalFrac_lo_hi_4 = bits(io.fracSum, 2, 2) @[Fusion.scala 39:63]
    node _finalFrac_T_13 = bits(io.fracSum, 1, 0) @[Fusion.scala 39:75]
    node finalFrac_lo_lo_4 = orr(_finalFrac_T_13) @[Fusion.scala 39:82]
    node finalFrac_lo_4 = cat(finalFrac_lo_hi_4, finalFrac_lo_lo_4) @[Cat.scala 30:58]
    node finalFrac_hi_4 = cat(finalFrac_hi_hi_4, finalFrac_hi_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_14 = cat(finalFrac_hi_4, finalFrac_lo_4) @[Cat.scala 30:58]
    node _finalFrac_T_15 = bits(io.fracSum, 13, 13) @[Fusion.scala 40:16]
    node finalFrac_hi_hi_5 = bits(io.fracSum, 12, 3) @[Fusion.scala 40:35]
    node finalFrac_hi_lo_5 = bits(io.fracSum, 2, 2) @[Fusion.scala 40:51]
    node finalFrac_lo_hi_5 = bits(io.fracSum, 1, 1) @[Fusion.scala 40:63]
    node finalFrac_lo_lo_5 = bits(io.fracSum, 0, 0) @[Fusion.scala 40:75]
    node finalFrac_lo_5 = cat(finalFrac_lo_hi_5, finalFrac_lo_lo_5) @[Cat.scala 30:58]
    node finalFrac_hi_5 = cat(finalFrac_hi_hi_5, finalFrac_hi_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_16 = cat(finalFrac_hi_5, finalFrac_lo_5) @[Cat.scala 30:58]
    node _finalFrac_T_17 = bits(io.fracSum, 12, 12) @[Fusion.scala 41:16]
    node finalFrac_hi_hi_6 = bits(io.fracSum, 11, 2) @[Fusion.scala 41:35]
    node finalFrac_hi_lo_6 = bits(io.fracSum, 1, 1) @[Fusion.scala 41:51]
    node finalFrac_lo_hi_6 = bits(io.fracSum, 0, 0) @[Fusion.scala 41:63]
    node finalFrac_lo_6 = cat(finalFrac_lo_hi_6, UInt<1>("h00")) @[Cat.scala 30:58]
    node finalFrac_hi_6 = cat(finalFrac_hi_hi_6, finalFrac_hi_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_18 = cat(finalFrac_hi_6, finalFrac_lo_6) @[Cat.scala 30:58]
    node _finalFrac_T_19 = bits(io.fracSum, 11, 11) @[Fusion.scala 42:16]
    node finalFrac_hi_hi_7 = bits(io.fracSum, 10, 1) @[Fusion.scala 42:35]
    node finalFrac_hi_lo_7 = bits(io.fracSum, 0, 0) @[Fusion.scala 42:51]
    node finalFrac_hi_7 = cat(finalFrac_hi_hi_7, finalFrac_hi_lo_7) @[Cat.scala 30:58]
    node _finalFrac_T_20 = cat(finalFrac_hi_7, UInt<2>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_21 = bits(io.fracSum, 10, 10) @[Fusion.scala 43:16]
    node finalFrac_hi_8 = bits(io.fracSum, 9, 0) @[Fusion.scala 43:35]
    node _finalFrac_T_22 = cat(finalFrac_hi_8, UInt<3>("h00")) @[Cat.scala 30:58]
    node _finalFrac_T_23 = mux(_finalFrac_T_21, _finalFrac_T_22, UInt<1>("h00")) @[Mux.scala 98:16]
    node _finalFrac_T_24 = mux(_finalFrac_T_19, _finalFrac_T_20, _finalFrac_T_23) @[Mux.scala 98:16]
    node _finalFrac_T_25 = mux(_finalFrac_T_17, _finalFrac_T_18, _finalFrac_T_24) @[Mux.scala 98:16]
    node _finalFrac_T_26 = mux(_finalFrac_T_15, _finalFrac_T_16, _finalFrac_T_25) @[Mux.scala 98:16]
    node _finalFrac_T_27 = mux(_finalFrac_T_12, _finalFrac_T_14, _finalFrac_T_26) @[Mux.scala 98:16]
    node _finalFrac_T_28 = mux(_finalFrac_T_9, _finalFrac_T_11, _finalFrac_T_27) @[Mux.scala 98:16]
    node _finalFrac_T_29 = mux(_finalFrac_T_6, _finalFrac_T_8, _finalFrac_T_28) @[Mux.scala 98:16]
    node _finalFrac_T_30 = mux(_finalFrac_T_3, _finalFrac_T_5, _finalFrac_T_29) @[Mux.scala 98:16]
    node finalFrac = mux(_finalFrac_T, _finalFrac_T_2, _finalFrac_T_30) @[Mux.scala 98:16]
    node lsb = bits(finalFrac, 3, 3) @[Fusion.scala 46:24]
    node guard = bits(finalFrac, 2, 2) @[Fusion.scala 47:26]
    node round = bits(finalFrac, 1, 1) @[Fusion.scala 48:26]
    node sticky = bits(finalFrac, 0, 0) @[Fusion.scala 49:27]
    node _roundUp_T = or(round, sticky) @[Fusion.scala 51:35]
    node _roundUp_T_1 = or(_roundUp_T, lsb) @[Fusion.scala 51:45]
    node roundUp = and(guard, _roundUp_T_1) @[Fusion.scala 51:25]
    node _roundedFrac_T = bits(finalFrac, 12, 3) @[Fusion.scala 52:33]
    node roundedFrac = add(_roundedFrac_T, roundUp) @[Fusion.scala 52:41]
    node expAdjust = bits(roundedFrac, 10, 10) @[Fusion.scala 53:35]
    node _normFrac_T = bits(roundedFrac, 10, 1) @[Fusion.scala 54:49]
    node _normFrac_T_1 = bits(roundedFrac, 9, 0) @[Fusion.scala 54:68]
    node normFrac = mux(expAdjust, _normFrac_T, _normFrac_T_1) @[Fusion.scala 54:23]
    node _expAdd_T = bits(io.fracSum, 18, 18) @[Fusion.scala 59:16]
    node _expAdd_T_1 = bits(io.fracSum, 17, 17) @[Fusion.scala 60:16]
    node _expAdd_T_2 = bits(io.fracSum, 16, 16) @[Fusion.scala 61:16]
    node _expAdd_T_3 = bits(io.fracSum, 15, 15) @[Fusion.scala 62:16]
    node _expAdd_T_4 = bits(io.fracSum, 14, 14) @[Fusion.scala 63:16]
    node _expAdd_T_5 = bits(io.fracSum, 13, 13) @[Fusion.scala 64:16]
    node _expAdd_T_6 = bits(io.fracSum, 12, 12) @[Fusion.scala 65:16]
    node _expAdd_T_7 = bits(io.fracSum, 11, 11) @[Fusion.scala 66:16]
    node _expAdd_T_8 = bits(io.fracSum, 10, 10) @[Fusion.scala 67:16]
    node _expAdd_T_9 = mux(_expAdd_T_8, UInt<1>("h00"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _expAdd_T_10 = mux(_expAdd_T_7, UInt<1>("h01"), _expAdd_T_9) @[Mux.scala 98:16]
    node _expAdd_T_11 = mux(_expAdd_T_6, UInt<2>("h02"), _expAdd_T_10) @[Mux.scala 98:16]
    node _expAdd_T_12 = mux(_expAdd_T_5, UInt<2>("h03"), _expAdd_T_11) @[Mux.scala 98:16]
    node _expAdd_T_13 = mux(_expAdd_T_4, UInt<3>("h04"), _expAdd_T_12) @[Mux.scala 98:16]
    node _expAdd_T_14 = mux(_expAdd_T_3, UInt<3>("h05"), _expAdd_T_13) @[Mux.scala 98:16]
    node _expAdd_T_15 = mux(_expAdd_T_2, UInt<3>("h06"), _expAdd_T_14) @[Mux.scala 98:16]
    node _expAdd_T_16 = mux(_expAdd_T_1, UInt<3>("h07"), _expAdd_T_15) @[Mux.scala 98:16]
    node _expAdd_T_17 = mux(_expAdd_T, UInt<4>("h08"), _expAdd_T_16) @[Mux.scala 98:16]
    node _expAdd_T_18 = add(_expAdd_T_17, expAdjust) @[Fusion.scala 68:8]
    node expAdd = tail(_expAdd_T_18, 1) @[Fusion.scala 68:8]
    wire exp : UInt<6> @[Fusion.scala 69:19]
    node _exp_T = add(originExp, expAdd) @[Fusion.scala 70:22]
    exp <= _exp_T @[Fusion.scala 70:9]
    node io_fp16_hi_lo = bits(exp, 4, 0) @[Fusion.scala 72:32]
    node io_fp16_hi = cat(io.sign, io_fp16_hi_lo) @[Cat.scala 30:58]
    node _io_fp16_T = cat(io_fp16_hi, normFrac) @[Cat.scala 30:58]
    io.fp16 <= _io_fp16_T @[Fusion.scala 72:13]
    
  module Fusion_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip int8 : UInt<8>, flip fp16 : UInt<16>[2], flip fusion : UInt<1>, output0 : UInt<16>, output1 : UInt<16>}
    
    node _sign0_T = bits(io.int8, 3, 3) @[Fusion.scala 85:24]
    node _sign0_T_1 = bits(io.fp16[0], 15, 15) @[Fusion.scala 85:40]
    node sign0 = xor(_sign0_T, _sign0_T_1) @[Fusion.scala 85:28]
    node _sign1_T = bits(io.int8, 7, 7) @[Fusion.scala 86:24]
    node _sign1_T_1 = bits(io.fp16[1], 15, 15) @[Fusion.scala 86:40]
    node sign1 = xor(_sign1_T, _sign1_T_1) @[Fusion.scala 86:28]
    node _iAbs0_T = bits(io.int8, 3, 0) @[Fusion.scala 89:36]
    node _iAbs0_T_1 = not(_iAbs0_T) @[Fusion.scala 89:28]
    node _iAbs0_T_2 = add(_iAbs0_T_1, UInt<1>("h01")) @[Fusion.scala 89:43]
    node _iAbs0_T_3 = tail(_iAbs0_T_2, 1) @[Fusion.scala 89:43]
    node _iAbs0_T_4 = bits(io.int8, 3, 0) @[Fusion.scala 89:57]
    node iAbs0 = mux(sign0, _iAbs0_T_3, _iAbs0_T_4) @[Fusion.scala 89:20]
    node _iAbs1_T = bits(io.int8, 7, 4) @[Fusion.scala 90:36]
    node _iAbs1_T_1 = not(_iAbs1_T) @[Fusion.scala 90:28]
    node _iAbs1_T_2 = add(_iAbs1_T_1, UInt<1>("h01")) @[Fusion.scala 90:43]
    node _iAbs1_T_3 = tail(_iAbs1_T_2, 1) @[Fusion.scala 90:43]
    node _iAbs1_T_4 = bits(io.int8, 7, 4) @[Fusion.scala 90:57]
    node iAbs1 = mux(sign1, _iAbs1_T_3, _iAbs1_T_4) @[Fusion.scala 90:20]
    node _iAbsFull_T = not(io.int8) @[Fusion.scala 92:31]
    node _iAbsFull_T_1 = add(_iAbsFull_T, UInt<1>("h01")) @[Fusion.scala 92:40]
    node _iAbsFull_T_2 = tail(_iAbsFull_T_1, 1) @[Fusion.scala 92:40]
    node iAbsFull = mux(sign1, _iAbsFull_T_2, io.int8) @[Fusion.scala 92:23]
    inst fracSum0 of fracSum_30 @[Fusion.scala 94:26]
    fracSum0.clock <= clock
    fracSum0.reset <= reset
    inst fracSum1 of fracSum_31 @[Fusion.scala 95:26]
    fracSum1.clock <= clock
    fracSum1.reset <= reset
    node _fracSum0_io_iAbs_T = bits(iAbsFull, 3, 0) @[Fusion.scala 96:48]
    node _fracSum0_io_iAbs_T_1 = mux(io.fusion, _fracSum0_io_iAbs_T, iAbs0) @[Fusion.scala 96:28]
    fracSum0.io.iAbs <= _fracSum0_io_iAbs_T_1 @[Fusion.scala 96:22]
    node _fracSum0_io_frac_T = bits(io.fp16[0], 9, 0) @[Fusion.scala 97:35]
    fracSum0.io.frac <= _fracSum0_io_frac_T @[Fusion.scala 97:22]
    fracSum1.io.iAbs <= iAbs1 @[Fusion.scala 98:22]
    node _fracSum1_io_frac_T = bits(io.fp16[1], 9, 0) @[Fusion.scala 99:35]
    fracSum1.io.frac <= _fracSum1_io_frac_T @[Fusion.scala 99:22]
    wire fusionFracSum : UInt<19> @[Fusion.scala 101:29]
    node _fusionFracSum_T = shl(fracSum1.io.fracSum, 4) @[Fusion.scala 102:43]
    node _fusionFracSum_T_1 = add(_fusionFracSum_T, fracSum0.io.fracSum) @[Fusion.scala 102:49]
    fusionFracSum <= _fusionFracSum_T_1 @[Fusion.scala 102:19]
    inst norm0 of Norm_30 @[Fusion.scala 104:23]
    norm0.clock <= clock
    norm0.reset <= reset
    inst norm1 of Norm_31 @[Fusion.scala 105:23]
    norm1.clock <= clock
    norm1.reset <= reset
    norm0.io.originFp16 <= io.fp16[0] @[Fusion.scala 106:25]
    norm0.io.fracSum <= fracSum0.io.fracSum @[Fusion.scala 107:22]
    norm0.io.sign <= sign0 @[Fusion.scala 108:19]
    io.output0 <= norm0.io.fp16 @[Fusion.scala 109:16]
    norm1.io.originFp16 <= io.fp16[1] @[Fusion.scala 111:25]
    node _norm1_io_fracSum_T = mux(io.fusion, fusionFracSum, fracSum1.io.fracSum) @[Fusion.scala 112:28]
    norm1.io.fracSum <= _norm1_io_fracSum_T @[Fusion.scala 112:22]
    norm1.io.sign <= sign1 @[Fusion.scala 113:19]
    io.output1 <= norm1.io.fp16 @[Fusion.scala 114:16]
    node _T = asUInt(reset) @[Fusion.scala 116:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[Fusion.scala 116:11]
    when _T_1 : @[Fusion.scala 116:11]
      printf(clock, UInt<1>(1), "%b %b\n", io.output0, io.output1) @[Fusion.scala 116:11]
      skip @[Fusion.scala 116:11]
    
  module fp16Add : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_16 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_17 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_18 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_19 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_20 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_21 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_22 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_23 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_24 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_25 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_26 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_27 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_28 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_29 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module fp16Add_30 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<16>, flip b : UInt<16>, out : UInt<16>}
    
    node expDiff_lo = bits(io.a, 14, 10) @[fp16Add.scala 19:34]
    node _expDiff_T = cat(UInt<1>("h00"), expDiff_lo) @[Cat.scala 30:58]
    node _expDiff_T_1 = bits(io.b, 14, 10) @[fp16Add.scala 19:62]
    node expDiff_lo_1 = not(_expDiff_T_1) @[fp16Add.scala 19:60]
    node _expDiff_T_2 = cat(UInt<1>("h01"), expDiff_lo_1) @[Cat.scala 30:58]
    node _expDiff_T_3 = add(_expDiff_T, _expDiff_T_2) @[fp16Add.scala 19:44]
    node _expDiff_T_4 = tail(_expDiff_T_3, 1) @[fp16Add.scala 19:44]
    node _expDiff_T_5 = add(_expDiff_T_4, UInt<6>("h01")) @[fp16Add.scala 19:72]
    node expDiff = tail(_expDiff_T_5, 1) @[fp16Add.scala 19:72]
    node manDiff_lo = bits(io.a, 9, 0) @[fp16Add.scala 20:34]
    node _manDiff_T = cat(UInt<1>("h00"), manDiff_lo) @[Cat.scala 30:58]
    node _manDiff_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 20:60]
    node manDiff_lo_1 = not(_manDiff_T_1) @[fp16Add.scala 20:58]
    node _manDiff_T_2 = cat(UInt<1>("h01"), manDiff_lo_1) @[Cat.scala 30:58]
    node _manDiff_T_3 = add(_manDiff_T, _manDiff_T_2) @[fp16Add.scala 20:42]
    node _manDiff_T_4 = tail(_manDiff_T_3, 1) @[fp16Add.scala 20:42]
    node _manDiff_T_5 = add(_manDiff_T_4, UInt<11>("h01")) @[fp16Add.scala 20:68]
    node manDiff = tail(_manDiff_T_5, 1) @[fp16Add.scala 20:68]
    node _expDiffIsZero_T = orr(expDiff) @[fp16Add.scala 22:34]
    node expDiffIsZero = eq(_expDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 22:25]
    node _manDiffIsZero_T = orr(manDiff) @[fp16Add.scala 23:34]
    node manDiffIsZero = eq(_manDiffIsZero_T, UInt<1>("h00")) @[fp16Add.scala 23:25]
    node _bigSel_T = bits(manDiff, 10, 10) @[fp16Add.scala 25:44]
    node _bigSel_T_1 = bits(expDiff, 5, 5) @[fp16Add.scala 25:57]
    node bigSel = mux(expDiffIsZero, _bigSel_T, _bigSel_T_1) @[fp16Add.scala 25:21]
    node _rawShiftRt_T = bits(expDiff, 5, 5) @[fp16Add.scala 27:33]
    node _rawShiftRt_T_1 = bits(expDiff, 4, 0) @[fp16Add.scala 27:47]
    node _rawShiftRt_T_2 = not(_rawShiftRt_T_1) @[fp16Add.scala 27:39]
    node _rawShiftRt_T_3 = add(_rawShiftRt_T_2, UInt<1>("h01")) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_4 = tail(_rawShiftRt_T_3, 1) @[fp16Add.scala 27:54]
    node _rawShiftRt_T_5 = bits(expDiff, 4, 0) @[fp16Add.scala 27:69]
    node rawShiftRt = mux(_rawShiftRt_T, _rawShiftRt_T_4, _rawShiftRt_T_5) @[fp16Add.scala 27:25]
    node _shiftRtAmt_T = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 28:37]
    node _shiftRtAmt_T_1 = bits(rawShiftRt, 3, 0) @[fp16Add.scala 28:71]
    node shiftRtAmt = mux(_shiftRtAmt_T, UInt<4>("h0b"), _shiftRtAmt_T_1) @[fp16Add.scala 28:25]
    node _operation_T = bits(io.a, 15, 15) @[fp16Add.scala 30:22]
    node _operation_T_1 = bits(io.b, 15, 15) @[fp16Add.scala 30:30]
    node operation = xor(_operation_T, _operation_T_1) @[fp16Add.scala 30:27]
    node _rawExp_T = bits(io.b, 14, 10) @[fp16Add.scala 32:31]
    node _rawExp_T_1 = bits(io.a, 14, 10) @[fp16Add.scala 32:42]
    node rawExp = mux(bigSel, _rawExp_T, _rawExp_T_1) @[fp16Add.scala 32:21]
    node _signOut_T = bits(io.b, 15, 15) @[fp16Add.scala 33:32]
    node _signOut_T_1 = bits(io.a, 15, 15) @[fp16Add.scala 33:39]
    node signOut = mux(bigSel, _signOut_T, _signOut_T_1) @[fp16Add.scala 33:22]
    node _bigMan_T = bits(io.b, 9, 0) @[fp16Add.scala 34:45]
    node _bigMan_T_1 = bits(io.a, 9, 0) @[fp16Add.scala 34:54]
    node bigMan_lo = mux(bigSel, _bigMan_T, _bigMan_T_1) @[fp16Add.scala 34:35]
    node bigMan = cat(UInt<1>("h01"), bigMan_lo) @[Cat.scala 30:58]
    node _lilMan_T = bits(io.a, 9, 0) @[fp16Add.scala 35:45]
    node _lilMan_T_1 = bits(io.b, 9, 0) @[fp16Add.scala 35:54]
    node lilMan_lo = mux(bigSel, _lilMan_T, _lilMan_T_1) @[fp16Add.scala 35:35]
    node lilMan = cat(UInt<1>("h01"), lilMan_lo) @[Cat.scala 30:58]
    node _shiftedMan_T = dshr(lilMan, shiftRtAmt) @[fp16Add.scala 37:30]
    node shiftedMan = bits(_shiftedMan_T, 10, 0) @[fp16Add.scala 37:44]
    node _guard_T = eq(shiftRtAmt, UInt<1>("h00")) @[fp16Add.scala 38:32]
    node _guard_T_1 = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 38:54]
    node _guard_T_2 = or(_guard_T, _guard_T_1) @[fp16Add.scala 38:40]
    node _guard_T_3 = sub(shiftRtAmt, UInt<1>("h01")) @[fp16Add.scala 38:94]
    node _guard_T_4 = tail(_guard_T_3, 1) @[fp16Add.scala 38:94]
    node _guard_T_5 = dshr(lilMan, _guard_T_4) @[fp16Add.scala 38:80]
    node _guard_T_6 = bits(_guard_T_5, 0, 0) @[fp16Add.scala 38:100]
    node guard = mux(_guard_T_2, UInt<1>("h00"), _guard_T_6) @[fp16Add.scala 38:20]
    wire mask : UInt<11> @[fp16Add.scala 40:20]
    node casez_sel_lo = gt(rawShiftRt, UInt<4>("h0b")) @[fp16Add.scala 41:48]
    node casez_sel = cat(shiftRtAmt, casez_sel_lo) @[Cat.scala 30:58]
    node _mask_T = eq(casez_sel, UInt<1>("h00")) @[fp16Add.scala 43:20]
    node _mask_T_1 = eq(casez_sel, UInt<2>("h02")) @[fp16Add.scala 44:20]
    node _mask_T_2 = eq(casez_sel, UInt<3>("h04")) @[fp16Add.scala 45:20]
    node _mask_T_3 = eq(casez_sel, UInt<3>("h06")) @[fp16Add.scala 46:20]
    node _mask_T_4 = eq(casez_sel, UInt<4>("h08")) @[fp16Add.scala 47:20]
    node _mask_T_5 = eq(casez_sel, UInt<4>("h0a")) @[fp16Add.scala 48:20]
    node _mask_T_6 = eq(casez_sel, UInt<4>("h0c")) @[fp16Add.scala 49:20]
    node _mask_T_7 = eq(casez_sel, UInt<4>("h0e")) @[fp16Add.scala 50:20]
    node _mask_T_8 = eq(casez_sel, UInt<5>("h010")) @[fp16Add.scala 51:20]
    node _mask_T_9 = eq(casez_sel, UInt<5>("h012")) @[fp16Add.scala 52:20]
    node _mask_T_10 = eq(casez_sel, UInt<5>("h014")) @[fp16Add.scala 53:20]
    node _mask_T_11 = eq(casez_sel, UInt<5>("h016")) @[fp16Add.scala 54:20]
    node _mask_T_12 = bits(casez_sel, 0, 0) @[fp16Add.scala 55:19]
    node _mask_T_13 = eq(_mask_T_12, UInt<1>("h01")) @[fp16Add.scala 55:23]
    node _mask_T_14 = mux(_mask_T_13, UInt<11>("h07ff"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _mask_T_15 = mux(_mask_T_11, UInt<10>("h03ff"), _mask_T_14) @[Mux.scala 98:16]
    node _mask_T_16 = mux(_mask_T_10, UInt<9>("h01ff"), _mask_T_15) @[Mux.scala 98:16]
    node _mask_T_17 = mux(_mask_T_9, UInt<8>("h0ff"), _mask_T_16) @[Mux.scala 98:16]
    node _mask_T_18 = mux(_mask_T_8, UInt<7>("h07f"), _mask_T_17) @[Mux.scala 98:16]
    node _mask_T_19 = mux(_mask_T_7, UInt<6>("h03f"), _mask_T_18) @[Mux.scala 98:16]
    node _mask_T_20 = mux(_mask_T_6, UInt<5>("h01f"), _mask_T_19) @[Mux.scala 98:16]
    node _mask_T_21 = mux(_mask_T_5, UInt<4>("h0f"), _mask_T_20) @[Mux.scala 98:16]
    node _mask_T_22 = mux(_mask_T_4, UInt<4>("h0f"), _mask_T_21) @[Mux.scala 98:16]
    node _mask_T_23 = mux(_mask_T_3, UInt<2>("h03"), _mask_T_22) @[Mux.scala 98:16]
    node _mask_T_24 = mux(_mask_T_2, UInt<1>("h01"), _mask_T_23) @[Mux.scala 98:16]
    node _mask_T_25 = mux(_mask_T_1, UInt<1>("h00"), _mask_T_24) @[Mux.scala 98:16]
    node _mask_T_26 = mux(_mask_T, UInt<1>("h00"), _mask_T_25) @[Mux.scala 98:16]
    mask <= _mask_T_26 @[fp16Add.scala 42:10]
    node _sticky_T = and(lilMan, mask) @[fp16Add.scala 58:26]
    node sticky = orr(_sticky_T) @[fp16Add.scala 58:34]
    node alignedMan_hi = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T = cat(alignedMan_hi, sticky) @[Cat.scala 30:58]
    node _alignedMan_T_1 = not(_alignedMan_T) @[fp16Add.scala 60:25]
    node alignedMan_hi_1 = cat(shiftedMan, guard) @[Cat.scala 30:58]
    node _alignedMan_T_2 = cat(alignedMan_hi_1, sticky) @[Cat.scala 30:58]
    node alignedMan = mux(operation, _alignedMan_T_1, _alignedMan_T_2) @[fp16Add.scala 59:25]
    node _rawMan_T = add(alignedMan, operation) @[fp16Add.scala 65:30]
    node _rawMan_T_1 = tail(_rawMan_T, 1) @[fp16Add.scala 65:30]
    node _rawMan_T_2 = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node rawMan = add(_rawMan_T_1, _rawMan_T_2) @[fp16Add.scala 65:50]
    node _T = cat(bigMan, UInt<2>("h00")) @[Cat.scala 30:58]
    node _T_1 = asUInt(reset) @[fp16Add.scala 66:11]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[fp16Add.scala 66:11]
    when _T_2 : @[fp16Add.scala 66:11]
      printf(clock, UInt<1>(1), "alignedMan: %b, bigMan: %b, rawMan: %b\n", alignedMan, _T, rawMan) @[fp16Add.scala 66:11]
      skip @[fp16Add.scala 66:11]
    node _signedMan_T = bits(rawMan, 13, 13) @[fp16Add.scala 69:31]
    node _signedMan_T_1 = eq(operation, UInt<1>("h00")) @[fp16Add.scala 69:39]
    node signedMan_hi = and(_signedMan_T, _signedMan_T_1) @[fp16Add.scala 69:36]
    node signedMan_lo = bits(rawMan, 12, 0) @[fp16Add.scala 69:57]
    node signedMan = cat(signedMan_hi, signedMan_lo) @[Cat.scala 30:58]
    node _normAmt_T = bits(signedMan, 0, 0) @[fp16Add.scala 8:52]
    node _normAmt_T_1 = bits(signedMan, 1, 1) @[fp16Add.scala 8:52]
    node _normAmt_T_2 = bits(signedMan, 2, 2) @[fp16Add.scala 8:52]
    node _normAmt_T_3 = bits(signedMan, 3, 3) @[fp16Add.scala 8:52]
    node _normAmt_T_4 = bits(signedMan, 4, 4) @[fp16Add.scala 8:52]
    node _normAmt_T_5 = bits(signedMan, 5, 5) @[fp16Add.scala 8:52]
    node _normAmt_T_6 = bits(signedMan, 6, 6) @[fp16Add.scala 8:52]
    node _normAmt_T_7 = bits(signedMan, 7, 7) @[fp16Add.scala 8:52]
    node _normAmt_T_8 = bits(signedMan, 8, 8) @[fp16Add.scala 8:52]
    node _normAmt_T_9 = bits(signedMan, 9, 9) @[fp16Add.scala 8:52]
    node _normAmt_T_10 = bits(signedMan, 10, 10) @[fp16Add.scala 8:52]
    node _normAmt_T_11 = bits(signedMan, 11, 11) @[fp16Add.scala 8:52]
    node _normAmt_T_12 = bits(signedMan, 12, 12) @[fp16Add.scala 8:52]
    node _normAmt_T_13 = bits(signedMan, 13, 13) @[fp16Add.scala 8:52]
    node _normAmt_T_14 = mux(_normAmt_T_1, UInt<4>("h0c"), UInt<4>("h0d")) @[Mux.scala 47:69]
    node _normAmt_T_15 = mux(_normAmt_T_2, UInt<4>("h0b"), _normAmt_T_14) @[Mux.scala 47:69]
    node _normAmt_T_16 = mux(_normAmt_T_3, UInt<4>("h0a"), _normAmt_T_15) @[Mux.scala 47:69]
    node _normAmt_T_17 = mux(_normAmt_T_4, UInt<4>("h09"), _normAmt_T_16) @[Mux.scala 47:69]
    node _normAmt_T_18 = mux(_normAmt_T_5, UInt<4>("h08"), _normAmt_T_17) @[Mux.scala 47:69]
    node _normAmt_T_19 = mux(_normAmt_T_6, UInt<3>("h07"), _normAmt_T_18) @[Mux.scala 47:69]
    node _normAmt_T_20 = mux(_normAmt_T_7, UInt<3>("h06"), _normAmt_T_19) @[Mux.scala 47:69]
    node _normAmt_T_21 = mux(_normAmt_T_8, UInt<3>("h05"), _normAmt_T_20) @[Mux.scala 47:69]
    node _normAmt_T_22 = mux(_normAmt_T_9, UInt<3>("h04"), _normAmt_T_21) @[Mux.scala 47:69]
    node _normAmt_T_23 = mux(_normAmt_T_10, UInt<2>("h03"), _normAmt_T_22) @[Mux.scala 47:69]
    node _normAmt_T_24 = mux(_normAmt_T_11, UInt<2>("h02"), _normAmt_T_23) @[Mux.scala 47:69]
    node _normAmt_T_25 = mux(_normAmt_T_12, UInt<1>("h01"), _normAmt_T_24) @[Mux.scala 47:69]
    node normAmt = mux(_normAmt_T_13, UInt<1>("h00"), _normAmt_T_25) @[Mux.scala 47:69]
    node _T_3 = asUInt(reset) @[fp16Add.scala 79:11]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[fp16Add.scala 79:11]
    when _T_4 : @[fp16Add.scala 79:11]
      printf(clock, UInt<1>(1), "normAmt: %b\n", normAmt) @[fp16Add.scala 79:11]
      skip @[fp16Add.scala 79:11]
    node _biasExp_T = add(rawExp, UInt<1>("h01")) @[fp16Add.scala 81:26]
    node biasExp = tail(_biasExp_T, 1) @[fp16Add.scala 81:26]
    node biasMan = cat(UInt<1>("h00"), signedMan) @[Cat.scala 30:58]
    node _normExp_T = cat(UInt<2>("h00"), normAmt) @[Cat.scala 30:58]
    node _normExp_T_1 = not(_normExp_T) @[fp16Add.scala 83:30]
    node _normExp_T_2 = add(_normExp_T_1, UInt<1>("h01")) @[fp16Add.scala 83:54]
    node _normExp_T_3 = tail(_normExp_T_2, 1) @[fp16Add.scala 83:54]
    node _normExp_T_4 = add(biasExp, _normExp_T_3) @[fp16Add.scala 83:27]
    node normExp = tail(_normExp_T_4, 1) @[fp16Add.scala 83:27]
    node expOut = bits(normExp, 4, 0) @[fp16Add.scala 84:25]
    node _normMan_T = dshl(biasMan, normAmt) @[fp16Add.scala 86:28]
    node normMan = bits(_normMan_T, 14, 0) @[fp16Add.scala 86:39]
    node manOut = bits(normMan, 12, 3) @[fp16Add.scala 87:25]
    node numOut = cat(expOut, manOut) @[Cat.scala 30:58]
    node _expAIsOne_T = bits(io.a, 14, 10) @[fp16Add.scala 97:22]
    node expAIsOne = andr(_expAIsOne_T) @[fp16Add.scala 97:31]
    node _expBIsOne_T = bits(io.b, 14, 10) @[fp16Add.scala 98:22]
    node expBIsOne = andr(_expBIsOne_T) @[fp16Add.scala 98:31]
    node _expAIsZero_T = bits(io.a, 14, 10) @[fp16Add.scala 99:24]
    node _expAIsZero_T_1 = orr(_expAIsZero_T) @[fp16Add.scala 99:33]
    node expAIsZero = eq(_expAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 99:22]
    node _expBIsZero_T = bits(io.b, 14, 10) @[fp16Add.scala 100:24]
    node _expBIsZero_T_1 = orr(_expBIsZero_T) @[fp16Add.scala 100:33]
    node expBIsZero = eq(_expBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 100:22]
    node _manAIsZero_T = bits(io.a, 9, 0) @[fp16Add.scala 101:24]
    node _manAIsZero_T_1 = orr(_manAIsZero_T) @[fp16Add.scala 101:31]
    node manAIsZero = eq(_manAIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 101:22]
    node _manBIsZero_T = bits(io.b, 9, 0) @[fp16Add.scala 102:24]
    node _manBIsZero_T_1 = orr(_manBIsZero_T) @[fp16Add.scala 102:31]
    node manBIsZero = eq(_manBIsZero_T_1, UInt<1>("h00")) @[fp16Add.scala 102:22]
    node _AIsNaN_T = eq(manAIsZero, UInt<1>("h00")) @[fp16Add.scala 103:31]
    node AIsNaN = and(expAIsOne, _AIsNaN_T) @[fp16Add.scala 103:28]
    node _BIsNaN_T = eq(manBIsZero, UInt<1>("h00")) @[fp16Add.scala 104:31]
    node BIsNaN = and(expBIsOne, _BIsNaN_T) @[fp16Add.scala 104:28]
    node AIsInf = and(expAIsOne, manAIsZero) @[fp16Add.scala 105:28]
    node BIsInf = and(expBIsOne, manBIsZero) @[fp16Add.scala 106:28]
    node _inIsNaN_T = or(AIsNaN, BIsNaN) @[fp16Add.scala 107:26]
    node _inIsNaN_T_1 = and(AIsInf, BIsInf) @[fp16Add.scala 107:47]
    node _inIsNaN_T_2 = and(_inIsNaN_T_1, operation) @[fp16Add.scala 107:57]
    node NaN = or(_inIsNaN_T, _inIsNaN_T_2) @[fp16Add.scala 107:36]
    node inIsInf = or(AIsInf, BIsInf) @[fp16Add.scala 108:26]
    node inIsDenorm = or(expAIsZero, expBIsZero) @[fp16Add.scala 109:33]
    node _zero_T = and(expDiffIsZero, manDiffIsZero) @[fp16Add.scala 110:30]
    node zero = and(_zero_T, operation) @[fp16Add.scala 110:47]
    node expOutIsOne = andr(expOut) @[fp16Add.scala 113:30]
    node _expOutIsZero_T = orr(expOut) @[fp16Add.scala 114:32]
    node expOutIsZero = eq(_expOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 114:24]
    node _manOutIsZero_T = orr(manOut) @[fp16Add.scala 115:32]
    node manOutIsZero = eq(_manOutIsZero_T, UInt<1>("h00")) @[fp16Add.scala 115:24]
    node _outIsInf_T = bits(normExp, 5, 5) @[fp16Add.scala 116:43]
    node _outIsInf_T_1 = eq(_outIsInf_T, UInt<1>("h00")) @[fp16Add.scala 116:35]
    node outIsInf = and(expOutIsOne, _outIsInf_T_1) @[fp16Add.scala 116:32]
    node _outIsDenorm_T = bits(normExp, 5, 5) @[fp16Add.scala 117:46]
    node outIsDenorm = or(expOutIsZero, _outIsDenorm_T) @[fp16Add.scala 117:36]
    node _overflow_T = or(inIsInf, outIsInf) @[fp16Add.scala 120:30]
    node _overflow_T_1 = not(zero) @[fp16Add.scala 120:45]
    node overflow = and(_overflow_T, _overflow_T_1) @[fp16Add.scala 120:43]
    node _underflow_T = or(inIsDenorm, outIsDenorm) @[fp16Add.scala 122:32]
    node underflow = or(_underflow_T, zero) @[fp16Add.scala 122:46]
    node _io_out_T = cat(signOut, UInt<15>("h07c00")) @[Cat.scala 30:58]
    node _io_out_T_1 = cat(signOut, numOut) @[Cat.scala 30:58]
    node _io_out_T_2 = mux(underflow, UInt<1>("h00"), _io_out_T_1) @[fp16Add.scala 127:36]
    node _io_out_T_3 = mux(overflow, _io_out_T, _io_out_T_2) @[fp16Add.scala 126:24]
    node _io_out_T_4 = mux(NaN, UInt<15>("h07fff"), _io_out_T_3) @[fp16Add.scala 125:18]
    io.out <= _io_out_T_4 @[fp16Add.scala 125:12]
    node _T_5 = asUInt(reset) @[fp16Add.scala 129:11]
    node _T_6 = eq(_T_5, UInt<1>("h00")) @[fp16Add.scala 129:11]
    when _T_6 : @[fp16Add.scala 129:11]
      printf(clock, UInt<1>(1), "io.a: %b, io.b: %b, io.out: %b_%b_%b\n", io.a, io.b, signOut, expOut, manOut) @[fp16Add.scala 129:11]
      skip @[fp16Add.scala 129:11]
    
  module InnerProduct : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip int : UInt<8>[16], flip fp : UInt<16>[32], result : UInt<16>, flip fusion : UInt<1>}
    
    inst fusionArray_0 of Fusion @[InnerProduct.scala 13:46]
    fusionArray_0.clock <= clock
    fusionArray_0.reset <= reset
    inst fusionArray_1 of Fusion_1 @[InnerProduct.scala 13:46]
    fusionArray_1.clock <= clock
    fusionArray_1.reset <= reset
    inst fusionArray_2 of Fusion_2 @[InnerProduct.scala 13:46]
    fusionArray_2.clock <= clock
    fusionArray_2.reset <= reset
    inst fusionArray_3 of Fusion_3 @[InnerProduct.scala 13:46]
    fusionArray_3.clock <= clock
    fusionArray_3.reset <= reset
    inst fusionArray_4 of Fusion_4 @[InnerProduct.scala 13:46]
    fusionArray_4.clock <= clock
    fusionArray_4.reset <= reset
    inst fusionArray_5 of Fusion_5 @[InnerProduct.scala 13:46]
    fusionArray_5.clock <= clock
    fusionArray_5.reset <= reset
    inst fusionArray_6 of Fusion_6 @[InnerProduct.scala 13:46]
    fusionArray_6.clock <= clock
    fusionArray_6.reset <= reset
    inst fusionArray_7 of Fusion_7 @[InnerProduct.scala 13:46]
    fusionArray_7.clock <= clock
    fusionArray_7.reset <= reset
    inst fusionArray_8 of Fusion_8 @[InnerProduct.scala 13:46]
    fusionArray_8.clock <= clock
    fusionArray_8.reset <= reset
    inst fusionArray_9 of Fusion_9 @[InnerProduct.scala 13:46]
    fusionArray_9.clock <= clock
    fusionArray_9.reset <= reset
    inst fusionArray_10 of Fusion_10 @[InnerProduct.scala 13:46]
    fusionArray_10.clock <= clock
    fusionArray_10.reset <= reset
    inst fusionArray_11 of Fusion_11 @[InnerProduct.scala 13:46]
    fusionArray_11.clock <= clock
    fusionArray_11.reset <= reset
    inst fusionArray_12 of Fusion_12 @[InnerProduct.scala 13:46]
    fusionArray_12.clock <= clock
    fusionArray_12.reset <= reset
    inst fusionArray_13 of Fusion_13 @[InnerProduct.scala 13:46]
    fusionArray_13.clock <= clock
    fusionArray_13.reset <= reset
    inst fusionArray_14 of Fusion_14 @[InnerProduct.scala 13:46]
    fusionArray_14.clock <= clock
    fusionArray_14.reset <= reset
    inst fusionArray_15 of Fusion_15 @[InnerProduct.scala 13:46]
    fusionArray_15.clock <= clock
    fusionArray_15.reset <= reset
    fusionArray_0.io.int8 <= io.int[0] @[InnerProduct.scala 16:32]
    wire _WIRE : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE[0] <= io.fp[1] @[InnerProduct.scala 17:42]
    _WIRE[1] <= io.fp[0] @[InnerProduct.scala 17:42]
    fusionArray_0.io.fp16[0] <= _WIRE[0] @[InnerProduct.scala 17:32]
    fusionArray_0.io.fp16[1] <= _WIRE[1] @[InnerProduct.scala 17:32]
    fusionArray_0.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_1.io.int8 <= io.int[1] @[InnerProduct.scala 16:32]
    wire _WIRE_1 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_1[0] <= io.fp[3] @[InnerProduct.scala 17:42]
    _WIRE_1[1] <= io.fp[2] @[InnerProduct.scala 17:42]
    fusionArray_1.io.fp16[0] <= _WIRE_1[0] @[InnerProduct.scala 17:32]
    fusionArray_1.io.fp16[1] <= _WIRE_1[1] @[InnerProduct.scala 17:32]
    fusionArray_1.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_2.io.int8 <= io.int[2] @[InnerProduct.scala 16:32]
    wire _WIRE_2 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_2[0] <= io.fp[5] @[InnerProduct.scala 17:42]
    _WIRE_2[1] <= io.fp[4] @[InnerProduct.scala 17:42]
    fusionArray_2.io.fp16[0] <= _WIRE_2[0] @[InnerProduct.scala 17:32]
    fusionArray_2.io.fp16[1] <= _WIRE_2[1] @[InnerProduct.scala 17:32]
    fusionArray_2.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_3.io.int8 <= io.int[3] @[InnerProduct.scala 16:32]
    wire _WIRE_3 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_3[0] <= io.fp[7] @[InnerProduct.scala 17:42]
    _WIRE_3[1] <= io.fp[6] @[InnerProduct.scala 17:42]
    fusionArray_3.io.fp16[0] <= _WIRE_3[0] @[InnerProduct.scala 17:32]
    fusionArray_3.io.fp16[1] <= _WIRE_3[1] @[InnerProduct.scala 17:32]
    fusionArray_3.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_4.io.int8 <= io.int[4] @[InnerProduct.scala 16:32]
    wire _WIRE_4 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_4[0] <= io.fp[9] @[InnerProduct.scala 17:42]
    _WIRE_4[1] <= io.fp[8] @[InnerProduct.scala 17:42]
    fusionArray_4.io.fp16[0] <= _WIRE_4[0] @[InnerProduct.scala 17:32]
    fusionArray_4.io.fp16[1] <= _WIRE_4[1] @[InnerProduct.scala 17:32]
    fusionArray_4.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_5.io.int8 <= io.int[5] @[InnerProduct.scala 16:32]
    wire _WIRE_5 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_5[0] <= io.fp[11] @[InnerProduct.scala 17:42]
    _WIRE_5[1] <= io.fp[10] @[InnerProduct.scala 17:42]
    fusionArray_5.io.fp16[0] <= _WIRE_5[0] @[InnerProduct.scala 17:32]
    fusionArray_5.io.fp16[1] <= _WIRE_5[1] @[InnerProduct.scala 17:32]
    fusionArray_5.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_6.io.int8 <= io.int[6] @[InnerProduct.scala 16:32]
    wire _WIRE_6 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_6[0] <= io.fp[13] @[InnerProduct.scala 17:42]
    _WIRE_6[1] <= io.fp[12] @[InnerProduct.scala 17:42]
    fusionArray_6.io.fp16[0] <= _WIRE_6[0] @[InnerProduct.scala 17:32]
    fusionArray_6.io.fp16[1] <= _WIRE_6[1] @[InnerProduct.scala 17:32]
    fusionArray_6.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_7.io.int8 <= io.int[7] @[InnerProduct.scala 16:32]
    wire _WIRE_7 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_7[0] <= io.fp[15] @[InnerProduct.scala 17:42]
    _WIRE_7[1] <= io.fp[14] @[InnerProduct.scala 17:42]
    fusionArray_7.io.fp16[0] <= _WIRE_7[0] @[InnerProduct.scala 17:32]
    fusionArray_7.io.fp16[1] <= _WIRE_7[1] @[InnerProduct.scala 17:32]
    fusionArray_7.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_8.io.int8 <= io.int[8] @[InnerProduct.scala 16:32]
    wire _WIRE_8 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_8[0] <= io.fp[17] @[InnerProduct.scala 17:42]
    _WIRE_8[1] <= io.fp[16] @[InnerProduct.scala 17:42]
    fusionArray_8.io.fp16[0] <= _WIRE_8[0] @[InnerProduct.scala 17:32]
    fusionArray_8.io.fp16[1] <= _WIRE_8[1] @[InnerProduct.scala 17:32]
    fusionArray_8.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_9.io.int8 <= io.int[9] @[InnerProduct.scala 16:32]
    wire _WIRE_9 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_9[0] <= io.fp[19] @[InnerProduct.scala 17:42]
    _WIRE_9[1] <= io.fp[18] @[InnerProduct.scala 17:42]
    fusionArray_9.io.fp16[0] <= _WIRE_9[0] @[InnerProduct.scala 17:32]
    fusionArray_9.io.fp16[1] <= _WIRE_9[1] @[InnerProduct.scala 17:32]
    fusionArray_9.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_10.io.int8 <= io.int[10] @[InnerProduct.scala 16:32]
    wire _WIRE_10 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_10[0] <= io.fp[21] @[InnerProduct.scala 17:42]
    _WIRE_10[1] <= io.fp[20] @[InnerProduct.scala 17:42]
    fusionArray_10.io.fp16[0] <= _WIRE_10[0] @[InnerProduct.scala 17:32]
    fusionArray_10.io.fp16[1] <= _WIRE_10[1] @[InnerProduct.scala 17:32]
    fusionArray_10.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_11.io.int8 <= io.int[11] @[InnerProduct.scala 16:32]
    wire _WIRE_11 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_11[0] <= io.fp[23] @[InnerProduct.scala 17:42]
    _WIRE_11[1] <= io.fp[22] @[InnerProduct.scala 17:42]
    fusionArray_11.io.fp16[0] <= _WIRE_11[0] @[InnerProduct.scala 17:32]
    fusionArray_11.io.fp16[1] <= _WIRE_11[1] @[InnerProduct.scala 17:32]
    fusionArray_11.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_12.io.int8 <= io.int[12] @[InnerProduct.scala 16:32]
    wire _WIRE_12 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_12[0] <= io.fp[25] @[InnerProduct.scala 17:42]
    _WIRE_12[1] <= io.fp[24] @[InnerProduct.scala 17:42]
    fusionArray_12.io.fp16[0] <= _WIRE_12[0] @[InnerProduct.scala 17:32]
    fusionArray_12.io.fp16[1] <= _WIRE_12[1] @[InnerProduct.scala 17:32]
    fusionArray_12.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_13.io.int8 <= io.int[13] @[InnerProduct.scala 16:32]
    wire _WIRE_13 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_13[0] <= io.fp[27] @[InnerProduct.scala 17:42]
    _WIRE_13[1] <= io.fp[26] @[InnerProduct.scala 17:42]
    fusionArray_13.io.fp16[0] <= _WIRE_13[0] @[InnerProduct.scala 17:32]
    fusionArray_13.io.fp16[1] <= _WIRE_13[1] @[InnerProduct.scala 17:32]
    fusionArray_13.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_14.io.int8 <= io.int[14] @[InnerProduct.scala 16:32]
    wire _WIRE_14 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_14[0] <= io.fp[29] @[InnerProduct.scala 17:42]
    _WIRE_14[1] <= io.fp[28] @[InnerProduct.scala 17:42]
    fusionArray_14.io.fp16[0] <= _WIRE_14[0] @[InnerProduct.scala 17:32]
    fusionArray_14.io.fp16[1] <= _WIRE_14[1] @[InnerProduct.scala 17:32]
    fusionArray_14.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    fusionArray_15.io.int8 <= io.int[15] @[InnerProduct.scala 16:32]
    wire _WIRE_15 : UInt<16>[2] @[InnerProduct.scala 17:42]
    _WIRE_15[0] <= io.fp[31] @[InnerProduct.scala 17:42]
    _WIRE_15[1] <= io.fp[30] @[InnerProduct.scala 17:42]
    fusionArray_15.io.fp16[0] <= _WIRE_15[0] @[InnerProduct.scala 17:32]
    fusionArray_15.io.fp16[1] <= _WIRE_15[1] @[InnerProduct.scala 17:32]
    fusionArray_15.io.fusion <= io.fusion @[InnerProduct.scala 18:34]
    reg outputs0_0 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_0 <= fusionArray_0.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_1 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_1 <= fusionArray_1.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_2 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_2 <= fusionArray_2.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_3 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_3 <= fusionArray_3.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_4 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_4 <= fusionArray_4.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_5 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_5 <= fusionArray_5.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_6 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_6 <= fusionArray_6.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_7 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_7 <= fusionArray_7.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_8 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_8 <= fusionArray_8.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_9 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_9 <= fusionArray_9.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_10 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_10 <= fusionArray_10.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_11 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_11 <= fusionArray_11.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_12 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_12 <= fusionArray_12.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_13 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_13 <= fusionArray_13.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_14 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_14 <= fusionArray_14.io.output0 @[InnerProduct.scala 21:66]
    reg outputs0_15 : UInt, clock @[InnerProduct.scala 21:66]
    outputs0_15 <= fusionArray_15.io.output0 @[InnerProduct.scala 21:66]
    reg outputs1_0 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_0 <= fusionArray_0.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_1 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_1 <= fusionArray_1.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_2 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_2 <= fusionArray_2.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_3 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_3 <= fusionArray_3.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_4 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_4 <= fusionArray_4.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_5 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_5 <= fusionArray_5.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_6 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_6 <= fusionArray_6.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_7 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_7 <= fusionArray_7.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_8 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_8 <= fusionArray_8.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_9 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_9 <= fusionArray_9.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_10 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_10 <= fusionArray_10.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_11 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_11 <= fusionArray_11.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_12 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_12 <= fusionArray_12.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_13 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_13 <= fusionArray_13.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_14 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_14 <= fusionArray_14.io.output1 @[InnerProduct.scala 22:66]
    reg outputs1_15 : UInt, clock @[InnerProduct.scala 22:66]
    outputs1_15 <= fusionArray_15.io.output1 @[InnerProduct.scala 22:66]
    node _T = bits(reset, 0, 0) @[InnerProduct.scala 24:11]
    node _T_1 = eq(_T, UInt<1>("h00")) @[InnerProduct.scala 24:11]
    when _T_1 : @[InnerProduct.scala 24:11]
      printf(clock, UInt<1>(1), "output0 = %b, output1 = %b\n", outputs0_0, outputs1_0) @[InnerProduct.scala 24:11]
      skip @[InnerProduct.scala 24:11]
    inst sum0_nextLevel_adder of fp16Add @[InnerProduct.scala 31:39]
    sum0_nextLevel_adder.clock <= clock
    sum0_nextLevel_adder.reset <= reset
    sum0_nextLevel_adder.io.a <= outputs0_0 @[InnerProduct.scala 32:32]
    sum0_nextLevel_adder.io.b <= outputs0_1 @[InnerProduct.scala 33:32]
    node _sum0_nextLevel_T = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_nextLevel_T_1 = eq(_sum0_nextLevel_T, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_nextLevel_T_1 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs0_0, outputs0_1) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_nextLevel_REG : UInt, clock @[InnerProduct.scala 35:28]
    sum0_nextLevel_REG <= sum0_nextLevel_adder.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder of fp16Add_1 @[InnerProduct.scala 31:39]
    sum0_adder.clock <= clock
    sum0_adder.reset <= reset
    sum0_adder.io.a <= outputs0_2 @[InnerProduct.scala 32:32]
    sum0_adder.io.b <= outputs0_3 @[InnerProduct.scala 33:32]
    node _sum0_T = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_1 = eq(_sum0_T, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_1 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs0_2, outputs0_3) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG <= sum0_adder.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder_1 of fp16Add_2 @[InnerProduct.scala 31:39]
    sum0_adder_1.clock <= clock
    sum0_adder_1.reset <= reset
    sum0_adder_1.io.a <= outputs0_4 @[InnerProduct.scala 32:32]
    sum0_adder_1.io.b <= outputs0_5 @[InnerProduct.scala 33:32]
    node _sum0_T_2 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_3 = eq(_sum0_T_2, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_3 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs0_4, outputs0_5) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG_1 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG_1 <= sum0_adder_1.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder_2 of fp16Add_3 @[InnerProduct.scala 31:39]
    sum0_adder_2.clock <= clock
    sum0_adder_2.reset <= reset
    sum0_adder_2.io.a <= outputs0_6 @[InnerProduct.scala 32:32]
    sum0_adder_2.io.b <= outputs0_7 @[InnerProduct.scala 33:32]
    node _sum0_T_4 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_5 = eq(_sum0_T_4, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_5 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs0_6, outputs0_7) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG_2 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG_2 <= sum0_adder_2.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder_3 of fp16Add_4 @[InnerProduct.scala 31:39]
    sum0_adder_3.clock <= clock
    sum0_adder_3.reset <= reset
    sum0_adder_3.io.a <= outputs0_8 @[InnerProduct.scala 32:32]
    sum0_adder_3.io.b <= outputs0_9 @[InnerProduct.scala 33:32]
    node _sum0_T_6 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_7 = eq(_sum0_T_6, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_7 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs0_8, outputs0_9) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG_3 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG_3 <= sum0_adder_3.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder_4 of fp16Add_5 @[InnerProduct.scala 31:39]
    sum0_adder_4.clock <= clock
    sum0_adder_4.reset <= reset
    sum0_adder_4.io.a <= outputs0_10 @[InnerProduct.scala 32:32]
    sum0_adder_4.io.b <= outputs0_11 @[InnerProduct.scala 33:32]
    node _sum0_T_8 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_9 = eq(_sum0_T_8, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_9 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs0_10, outputs0_11) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG_4 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG_4 <= sum0_adder_4.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder_5 of fp16Add_6 @[InnerProduct.scala 31:39]
    sum0_adder_5.clock <= clock
    sum0_adder_5.reset <= reset
    sum0_adder_5.io.a <= outputs0_12 @[InnerProduct.scala 32:32]
    sum0_adder_5.io.b <= outputs0_13 @[InnerProduct.scala 33:32]
    node _sum0_T_10 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_11 = eq(_sum0_T_10, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_11 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs0_12, outputs0_13) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG_5 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG_5 <= sum0_adder_5.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder_6 of fp16Add_7 @[InnerProduct.scala 31:39]
    sum0_adder_6.clock <= clock
    sum0_adder_6.reset <= reset
    sum0_adder_6.io.a <= outputs0_14 @[InnerProduct.scala 32:32]
    sum0_adder_6.io.b <= outputs0_15 @[InnerProduct.scala 33:32]
    node _sum0_T_12 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_13 = eq(_sum0_T_12, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_13 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs0_14, outputs0_15) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG_6 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG_6 <= sum0_adder_6.io.out @[InnerProduct.scala 35:28]
    inst sum0_nextLevel_adder_1 of fp16Add_8 @[InnerProduct.scala 31:39]
    sum0_nextLevel_adder_1.clock <= clock
    sum0_nextLevel_adder_1.reset <= reset
    sum0_nextLevel_adder_1.io.a <= sum0_nextLevel_REG @[InnerProduct.scala 32:32]
    sum0_nextLevel_adder_1.io.b <= sum0_REG @[InnerProduct.scala 33:32]
    node _sum0_nextLevel_T_2 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_nextLevel_T_3 = eq(_sum0_nextLevel_T_2, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_nextLevel_T_3 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum0_nextLevel_REG, sum0_REG) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_nextLevel_REG_1 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_nextLevel_REG_1 <= sum0_nextLevel_adder_1.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder_7 of fp16Add_9 @[InnerProduct.scala 31:39]
    sum0_adder_7.clock <= clock
    sum0_adder_7.reset <= reset
    sum0_adder_7.io.a <= sum0_REG_1 @[InnerProduct.scala 32:32]
    sum0_adder_7.io.b <= sum0_REG_2 @[InnerProduct.scala 33:32]
    node _sum0_T_14 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_15 = eq(_sum0_T_14, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_15 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum0_REG_1, sum0_REG_2) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG_7 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG_7 <= sum0_adder_7.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder_8 of fp16Add_10 @[InnerProduct.scala 31:39]
    sum0_adder_8.clock <= clock
    sum0_adder_8.reset <= reset
    sum0_adder_8.io.a <= sum0_REG_3 @[InnerProduct.scala 32:32]
    sum0_adder_8.io.b <= sum0_REG_4 @[InnerProduct.scala 33:32]
    node _sum0_T_16 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_17 = eq(_sum0_T_16, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_17 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum0_REG_3, sum0_REG_4) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG_8 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG_8 <= sum0_adder_8.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder_9 of fp16Add_11 @[InnerProduct.scala 31:39]
    sum0_adder_9.clock <= clock
    sum0_adder_9.reset <= reset
    sum0_adder_9.io.a <= sum0_REG_5 @[InnerProduct.scala 32:32]
    sum0_adder_9.io.b <= sum0_REG_6 @[InnerProduct.scala 33:32]
    node _sum0_T_18 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_19 = eq(_sum0_T_18, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_19 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum0_REG_5, sum0_REG_6) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG_9 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG_9 <= sum0_adder_9.io.out @[InnerProduct.scala 35:28]
    inst sum0_nextLevel_adder_2 of fp16Add_12 @[InnerProduct.scala 31:39]
    sum0_nextLevel_adder_2.clock <= clock
    sum0_nextLevel_adder_2.reset <= reset
    sum0_nextLevel_adder_2.io.a <= sum0_nextLevel_REG_1 @[InnerProduct.scala 32:32]
    sum0_nextLevel_adder_2.io.b <= sum0_REG_7 @[InnerProduct.scala 33:32]
    node _sum0_nextLevel_T_4 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_nextLevel_T_5 = eq(_sum0_nextLevel_T_4, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_nextLevel_T_5 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum0_nextLevel_REG_1, sum0_REG_7) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_nextLevel_REG_2 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_nextLevel_REG_2 <= sum0_nextLevel_adder_2.io.out @[InnerProduct.scala 35:28]
    inst sum0_adder_10 of fp16Add_13 @[InnerProduct.scala 31:39]
    sum0_adder_10.clock <= clock
    sum0_adder_10.reset <= reset
    sum0_adder_10.io.a <= sum0_REG_8 @[InnerProduct.scala 32:32]
    sum0_adder_10.io.b <= sum0_REG_9 @[InnerProduct.scala 33:32]
    node _sum0_T_20 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_T_21 = eq(_sum0_T_20, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_T_21 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum0_REG_8, sum0_REG_9) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0_REG_10 : UInt, clock @[InnerProduct.scala 35:28]
    sum0_REG_10 <= sum0_adder_10.io.out @[InnerProduct.scala 35:28]
    inst sum0_nextLevel_adder_3 of fp16Add_14 @[InnerProduct.scala 31:39]
    sum0_nextLevel_adder_3.clock <= clock
    sum0_nextLevel_adder_3.reset <= reset
    sum0_nextLevel_adder_3.io.a <= sum0_nextLevel_REG_2 @[InnerProduct.scala 32:32]
    sum0_nextLevel_adder_3.io.b <= sum0_REG_10 @[InnerProduct.scala 33:32]
    node _sum0_nextLevel_T_6 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum0_nextLevel_T_7 = eq(_sum0_nextLevel_T_6, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum0_nextLevel_T_7 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum0_nextLevel_REG_2, sum0_REG_10) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum0 : UInt, clock @[InnerProduct.scala 35:28]
    sum0 <= sum0_nextLevel_adder_3.io.out @[InnerProduct.scala 35:28]
    inst sum1_nextLevel_adder of fp16Add_15 @[InnerProduct.scala 31:39]
    sum1_nextLevel_adder.clock <= clock
    sum1_nextLevel_adder.reset <= reset
    sum1_nextLevel_adder.io.a <= outputs1_0 @[InnerProduct.scala 32:32]
    sum1_nextLevel_adder.io.b <= outputs1_1 @[InnerProduct.scala 33:32]
    node _sum1_nextLevel_T = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_nextLevel_T_1 = eq(_sum1_nextLevel_T, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_nextLevel_T_1 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs1_0, outputs1_1) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_nextLevel_REG : UInt, clock @[InnerProduct.scala 35:28]
    sum1_nextLevel_REG <= sum1_nextLevel_adder.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder of fp16Add_16 @[InnerProduct.scala 31:39]
    sum1_adder.clock <= clock
    sum1_adder.reset <= reset
    sum1_adder.io.a <= outputs1_2 @[InnerProduct.scala 32:32]
    sum1_adder.io.b <= outputs1_3 @[InnerProduct.scala 33:32]
    node _sum1_T = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_1 = eq(_sum1_T, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_1 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs1_2, outputs1_3) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG <= sum1_adder.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder_1 of fp16Add_17 @[InnerProduct.scala 31:39]
    sum1_adder_1.clock <= clock
    sum1_adder_1.reset <= reset
    sum1_adder_1.io.a <= outputs1_4 @[InnerProduct.scala 32:32]
    sum1_adder_1.io.b <= outputs1_5 @[InnerProduct.scala 33:32]
    node _sum1_T_2 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_3 = eq(_sum1_T_2, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_3 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs1_4, outputs1_5) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG_1 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG_1 <= sum1_adder_1.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder_2 of fp16Add_18 @[InnerProduct.scala 31:39]
    sum1_adder_2.clock <= clock
    sum1_adder_2.reset <= reset
    sum1_adder_2.io.a <= outputs1_6 @[InnerProduct.scala 32:32]
    sum1_adder_2.io.b <= outputs1_7 @[InnerProduct.scala 33:32]
    node _sum1_T_4 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_5 = eq(_sum1_T_4, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_5 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs1_6, outputs1_7) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG_2 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG_2 <= sum1_adder_2.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder_3 of fp16Add_19 @[InnerProduct.scala 31:39]
    sum1_adder_3.clock <= clock
    sum1_adder_3.reset <= reset
    sum1_adder_3.io.a <= outputs1_8 @[InnerProduct.scala 32:32]
    sum1_adder_3.io.b <= outputs1_9 @[InnerProduct.scala 33:32]
    node _sum1_T_6 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_7 = eq(_sum1_T_6, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_7 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs1_8, outputs1_9) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG_3 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG_3 <= sum1_adder_3.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder_4 of fp16Add_20 @[InnerProduct.scala 31:39]
    sum1_adder_4.clock <= clock
    sum1_adder_4.reset <= reset
    sum1_adder_4.io.a <= outputs1_10 @[InnerProduct.scala 32:32]
    sum1_adder_4.io.b <= outputs1_11 @[InnerProduct.scala 33:32]
    node _sum1_T_8 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_9 = eq(_sum1_T_8, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_9 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs1_10, outputs1_11) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG_4 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG_4 <= sum1_adder_4.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder_5 of fp16Add_21 @[InnerProduct.scala 31:39]
    sum1_adder_5.clock <= clock
    sum1_adder_5.reset <= reset
    sum1_adder_5.io.a <= outputs1_12 @[InnerProduct.scala 32:32]
    sum1_adder_5.io.b <= outputs1_13 @[InnerProduct.scala 33:32]
    node _sum1_T_10 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_11 = eq(_sum1_T_10, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_11 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs1_12, outputs1_13) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG_5 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG_5 <= sum1_adder_5.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder_6 of fp16Add_22 @[InnerProduct.scala 31:39]
    sum1_adder_6.clock <= clock
    sum1_adder_6.reset <= reset
    sum1_adder_6.io.a <= outputs1_14 @[InnerProduct.scala 32:32]
    sum1_adder_6.io.b <= outputs1_15 @[InnerProduct.scala 33:32]
    node _sum1_T_12 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_13 = eq(_sum1_T_12, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_13 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", outputs1_14, outputs1_15) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG_6 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG_6 <= sum1_adder_6.io.out @[InnerProduct.scala 35:28]
    inst sum1_nextLevel_adder_1 of fp16Add_23 @[InnerProduct.scala 31:39]
    sum1_nextLevel_adder_1.clock <= clock
    sum1_nextLevel_adder_1.reset <= reset
    sum1_nextLevel_adder_1.io.a <= sum1_nextLevel_REG @[InnerProduct.scala 32:32]
    sum1_nextLevel_adder_1.io.b <= sum1_REG @[InnerProduct.scala 33:32]
    node _sum1_nextLevel_T_2 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_nextLevel_T_3 = eq(_sum1_nextLevel_T_2, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_nextLevel_T_3 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum1_nextLevel_REG, sum1_REG) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_nextLevel_REG_1 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_nextLevel_REG_1 <= sum1_nextLevel_adder_1.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder_7 of fp16Add_24 @[InnerProduct.scala 31:39]
    sum1_adder_7.clock <= clock
    sum1_adder_7.reset <= reset
    sum1_adder_7.io.a <= sum1_REG_1 @[InnerProduct.scala 32:32]
    sum1_adder_7.io.b <= sum1_REG_2 @[InnerProduct.scala 33:32]
    node _sum1_T_14 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_15 = eq(_sum1_T_14, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_15 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum1_REG_1, sum1_REG_2) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG_7 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG_7 <= sum1_adder_7.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder_8 of fp16Add_25 @[InnerProduct.scala 31:39]
    sum1_adder_8.clock <= clock
    sum1_adder_8.reset <= reset
    sum1_adder_8.io.a <= sum1_REG_3 @[InnerProduct.scala 32:32]
    sum1_adder_8.io.b <= sum1_REG_4 @[InnerProduct.scala 33:32]
    node _sum1_T_16 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_17 = eq(_sum1_T_16, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_17 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum1_REG_3, sum1_REG_4) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG_8 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG_8 <= sum1_adder_8.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder_9 of fp16Add_26 @[InnerProduct.scala 31:39]
    sum1_adder_9.clock <= clock
    sum1_adder_9.reset <= reset
    sum1_adder_9.io.a <= sum1_REG_5 @[InnerProduct.scala 32:32]
    sum1_adder_9.io.b <= sum1_REG_6 @[InnerProduct.scala 33:32]
    node _sum1_T_18 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_19 = eq(_sum1_T_18, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_19 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum1_REG_5, sum1_REG_6) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG_9 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG_9 <= sum1_adder_9.io.out @[InnerProduct.scala 35:28]
    inst sum1_nextLevel_adder_2 of fp16Add_27 @[InnerProduct.scala 31:39]
    sum1_nextLevel_adder_2.clock <= clock
    sum1_nextLevel_adder_2.reset <= reset
    sum1_nextLevel_adder_2.io.a <= sum1_nextLevel_REG_1 @[InnerProduct.scala 32:32]
    sum1_nextLevel_adder_2.io.b <= sum1_REG_7 @[InnerProduct.scala 33:32]
    node _sum1_nextLevel_T_4 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_nextLevel_T_5 = eq(_sum1_nextLevel_T_4, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_nextLevel_T_5 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum1_nextLevel_REG_1, sum1_REG_7) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_nextLevel_REG_2 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_nextLevel_REG_2 <= sum1_nextLevel_adder_2.io.out @[InnerProduct.scala 35:28]
    inst sum1_adder_10 of fp16Add_28 @[InnerProduct.scala 31:39]
    sum1_adder_10.clock <= clock
    sum1_adder_10.reset <= reset
    sum1_adder_10.io.a <= sum1_REG_8 @[InnerProduct.scala 32:32]
    sum1_adder_10.io.b <= sum1_REG_9 @[InnerProduct.scala 33:32]
    node _sum1_T_20 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_T_21 = eq(_sum1_T_20, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_T_21 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum1_REG_8, sum1_REG_9) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1_REG_10 : UInt, clock @[InnerProduct.scala 35:28]
    sum1_REG_10 <= sum1_adder_10.io.out @[InnerProduct.scala 35:28]
    inst sum1_nextLevel_adder_3 of fp16Add_29 @[InnerProduct.scala 31:39]
    sum1_nextLevel_adder_3.clock <= clock
    sum1_nextLevel_adder_3.reset <= reset
    sum1_nextLevel_adder_3.io.a <= sum1_nextLevel_REG_2 @[InnerProduct.scala 32:32]
    sum1_nextLevel_adder_3.io.b <= sum1_REG_10 @[InnerProduct.scala 33:32]
    node _sum1_nextLevel_T_6 = bits(reset, 0, 0) @[InnerProduct.scala 34:27]
    node _sum1_nextLevel_T_7 = eq(_sum1_nextLevel_T_6, UInt<1>("h00")) @[InnerProduct.scala 34:27]
    when _sum1_nextLevel_T_7 : @[InnerProduct.scala 34:27]
      printf(clock, UInt<1>(1), "a: %b, b: %b\n", sum1_nextLevel_REG_2, sum1_REG_10) @[InnerProduct.scala 34:27]
      skip @[InnerProduct.scala 34:27]
    reg sum1 : UInt, clock @[InnerProduct.scala 35:28]
    sum1 <= sum1_nextLevel_adder_3.io.out @[InnerProduct.scala 35:28]
    inst finalAdder of fp16Add_30 @[InnerProduct.scala 45:28]
    finalAdder.clock <= clock
    finalAdder.reset <= reset
    finalAdder.io.a <= sum0 @[InnerProduct.scala 46:21]
    finalAdder.io.b <= sum1 @[InnerProduct.scala 47:21]
    reg io_result_REG : UInt, clock @[InnerProduct.scala 49:46]
    io_result_REG <= finalAdder.io.out @[InnerProduct.scala 49:46]
    node _io_result_T = mux(io.fusion, sum1, io_result_REG) @[InnerProduct.scala 49:21]
    io.result <= _io_result_T @[InnerProduct.scala 49:15]
    node _T_2 = bits(reset, 0, 0) @[InnerProduct.scala 50:11]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[InnerProduct.scala 50:11]
    when _T_3 : @[InnerProduct.scala 50:11]
      printf(clock, UInt<1>(1), "io.result = %b\n", io.result) @[InnerProduct.scala 50:11]
      skip @[InnerProduct.scala 50:11]
    
