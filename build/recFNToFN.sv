// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module recFNToFN(	// @[home/yzy/chisel-playground/playground/src/recFNToFN.scala:6:7]
  input  [16:0] io_in,	// @[home/yzy/chisel-playground/playground/src/recFNToFN.scala:7:16]
  output [15:0] io_out	// @[home/yzy/chisel-playground/playground/src/recFNToFN.scala:7:16]
);

  wire        rawFloat_isInf = (&(io_in[15:14])) & ~(io_in[13]);	// @[home/yzy/chisel-playground/playground/src/rawFloatFromRecFN.scala:50:21, :52:{28,53}, :55:41, :56:{33,36}]
  wire        isSubnormal = $signed({1'h0, io_in[15:10]}) < -7'shE;	// @[home/yzy/chisel-playground/playground/src/rawFloatFromRecFN.scala:50:21, :51:53, :59:27, home/yzy/chisel-playground/playground/src/recFNToFN.scala:23:29]
  wire [10:0] _fracOut_T_1 = {1'h0, |(io_in[15:13]), io_in[9:1]} >> 4'h1 - io_in[13:10];	// @[home/yzy/chisel-playground/playground/src/rawFloatFromRecFN.scala:50:21, :51:{28,53}, home/yzy/chisel-playground/playground/src/recFNToFN.scala:25:45, :31:{22,28}]
  assign io_out =
    {io_in[16],
     (isSubnormal ? 5'h0 : io_in[14:10] + 5'hF)
       | {5{(&(io_in[15:14])) & io_in[13] | rawFloat_isInf}},
     isSubnormal ? _fracOut_T_1[9:0] : rawFloat_isInf ? 10'h0 : io_in[9:0]};	// @[home/yzy/chisel-playground/playground/src/rawFloatFromRecFN.scala:50:21, :52:{28,53}, :55:{33,41}, :56:33, :58:25, :60:49, home/yzy/chisel-playground/playground/src/recFNToFN.scala:6:7, :23:29, :25:45, :27:{21,59,91,96,103,117}, :30:19, :31:28, :32:20, :34:18]
endmodule

